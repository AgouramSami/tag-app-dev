const express = require("express");
const router = express.Router();
const Theme = require("../models/Theme");
const {
  authMiddleware,
  adminMiddleware,
} = require("../middleware/authMiddleware");

// üìå üì• Ajouter un nouveau th√®me (Admin uniquement)
router.post("/", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { nom } = req.body;

    // V√©rifier si le th√®me existe d√©j√†
    const existingTheme = await Theme.findOne({ nom });
    if (existingTheme) {
      return res.status(400).json({ message: "Ce th√®me existe d√©j√†." });
    }

    const newTheme = new Theme({ nom });
    await newTheme.save();

    res.status(201).json({ message: "Th√®me ajout√© avec succ√®s !" });
  } catch (error) {
    console.error("Erreur lors de l'ajout du th√®me :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå üîç R√©cup√©rer tous les th√®mes actifs
router.get("/", async (req, res) => {
  try {
    const themes = await Theme.find({ actif: true }).sort({ nom: 1 });
    res.status(200).json(themes);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des th√®mes :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå üîç R√©cup√©rer un th√®me par son ID
router.get("/:id", async (req, res) => {
  try {
    const theme = await Theme.findById(req.params.id);
    if (!theme) {
      return res.status(404).json({ message: "Th√®me non trouv√©" });
    }
    res.status(200).json(theme);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du th√®me :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå üîÑ D√©sactiver un th√®me (Admin uniquement)
router.put("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const theme = await Theme.findById(req.params.id);
    if (!theme) return res.status(404).json({ message: "Th√®me non trouv√©" });

    theme.actif = !theme.actif; // Bascule l'√©tat actif/inactif
    await theme.save();

    res.status(200).json({ message: "Statut du th√®me mis √† jour !" });
  } catch (error) {
    console.error("Erreur lors de la mise √† jour du th√®me :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå üóëÔ∏è Supprimer un th√®me (Admin uniquement)
router.delete("/:id", authMiddleware, adminMiddleware, async (req, res) => {
  try {
    await Theme.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: "Th√®me supprim√© avec succ√®s !" });
  } catch (error) {
    console.error("Erreur lors de la suppression du th√®me :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

module.exports = router;
