const express = require("express");
const router = express.Router();
const FAQ = require("../models/FAQ");
const { authMiddleware } = require("../middleware/authMiddleware");

// üìå üîç R√©cup√©rer toutes les FAQ
router.get("/", async (req, res) => {
  try {
    const faqs = await FAQ.find().sort({ dateCreation: -1 });
    res.status(200).json(faqs);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des FAQ :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå üì§ Ajouter une nouvelle FAQ (üîí R√©serv√© aux juristes)
router.post("/", authMiddleware, async (req, res) => {
  try {
    if (req.user.permissions !== "juriste") {
      return res.status(403).json({ message: "Acc√®s refus√©" });
    }

    const { theme, question, reponse } = req.body;

    if (!question || !reponse || !theme) {
      return res.status(400).json({ message: "Tous les champs sont requis." });
    }

    const nouvelleFAQ = new FAQ({
      theme,
      question,
      reponse,
      auteur: req.user._id,
    });

    await nouvelleFAQ.save();
    res
      .status(201)
      .json({ message: "FAQ ajout√©e avec succ√®s", faq: nouvelleFAQ });
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout de la FAQ :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå üóëÔ∏è Supprimer une FAQ (üîí R√©serv√© aux juristes)
router.delete("/:id", authMiddleware, async (req, res) => {
  try {
    if (req.user.permissions !== "juriste") {
      return res.status(403).json({ message: "Acc√®s refus√©" });
    }

    const faq = await FAQ.findById(req.params.id);
    if (!faq) {
      return res.status(404).json({ message: "FAQ non trouv√©e" });
    }

    await faq.deleteOne();
    res.status(200).json({ message: "FAQ supprim√©e avec succ√®s" });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la FAQ :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üîç Fonction pour supprimer les accents et normaliser une cha√Æne
const normalizeText = (str) => {
  return str
    .normalize("NFD") // D√©compose les caract√®res accentu√©s
    .replace(/[\u0300-\u036f]/g, "") // Supprime les accents
    .toLowerCase(); // Met en minuscule pour l'insensibilit√© √† la casse
};

// üìå Route pour rechercher des FAQ
router.get("/search", async (req, res) => {
  try {
    let query = req.query.query;

    if (!query || query.length < 3) {
      return res.status(400).json({ message: "Requ√™te trop courte." });
    }

    // üî• Normalisation du texte de la requ√™te
    const normalizedQuery = normalizeText(query);

    // üîç R√©cup√©rer toutes les FAQ pour comparer avec la requ√™te normalis√©e
    const faqs = await FAQ.find({});

    // üõ†Ô∏è Filtrage manuel des questions en supprimant accents et majuscules
    const filteredFaqs = faqs.filter((faq) =>
      normalizeText(faq.question).includes(normalizedQuery)
    );

    res.json(filteredFaqs.slice(0, 5)); // Limite √† 5 r√©sultats
  } catch (error) {
    console.error("‚ùå Erreur lors de la recherche des FAQ :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// üìå ‚úèÔ∏è Modifier une FAQ (üîí R√©serv√© aux juristes)
router.put("/:id", authMiddleware, async (req, res) => {
  try {
    if (req.user.permissions !== "juriste") {
      return res.status(403).json({ message: "Acc√®s refus√©" });
    }

    const { theme, question, reponse } = req.body;

    if (!question || !reponse) {
      return res.status(400).json({ message: "Tous les champs sont requis." });
    }

    const faq = await FAQ.findById(req.params.id);
    if (!faq) {
      return res.status(404).json({ message: "FAQ non trouv√©e" });
    }

    faq.theme = theme;
    faq.question = question;
    faq.reponse = reponse;
    faq.dateModification = new Date();

    await faq.save();
    res.status(200).json({ message: "FAQ modifi√©e avec succ√®s", faq });
  } catch (error) {
    console.error("‚ùå Erreur lors de la modification de la FAQ :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

module.exports = router;
